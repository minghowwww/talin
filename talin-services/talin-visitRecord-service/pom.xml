<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>talin-services</artifactId>
        <groupId>com.asianrapid</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>
    <packaging>jar</packaging>
    <artifactId>talin-visitRecord-service</artifactId>
    <!--注意限定版本一定为RELEASE,因为上传的对应仓库的存储类型为RELEASE -->
    <!--指定仓库地址 -->
    <distributionManagement>

        <repository>
            <!--这里的id需要和settings.xml中的server的id一致-->
            <id>nexus-release</id>
            <name>Nexus release Repository</name>
            <!--releases仓库-->
            <url>http://192.168.2.66:8081/repository/asianrapid-release/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshot</id>
            <name>Nexus snapshots Repository</name>
            <!--snapshots仓库-->
            <url>http://192.168.2.66:8081/repository/asianrapid-Snapshot/</url>
        </snapshotRepository>
    </distributionManagement>

<!--    <build>-->
<!--        <plugins>-->
<!--            <plugin>-->
<!--                <groupId>org.springframework.boot</groupId>-->
<!--                <artifactId>spring-boot-maven-plugin</artifactId>-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <goals>-->
<!--                            <goal>repackage</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->
<!--            </plugin>-->

<!--            &lt;!&ndash;使用docker-maven-plugin插件&ndash;&gt;-->
<!--            <plugin>-->
<!--                <groupId>com.spotify</groupId>-->
<!--                <artifactId>docker-maven-plugin</artifactId>-->
<!--                <version>0.4.13</version>-->

<!--                &lt;!&ndash;将插件绑定在某个phase执行&ndash;&gt;-->
<!--                <executions>-->
<!--                    <execution>-->
<!--                        <id>build-image</id>-->
<!--                        &lt;!&ndash;将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build&ndash;&gt;-->
<!--                        <phase>package</phase>-->
<!--                        <goals>-->
<!--                            <goal>build</goal>-->
<!--                        </goals>-->
<!--                    </execution>-->
<!--                </executions>-->

<!--                <configuration>-->
<!--                    &lt;!&ndash;指定生成的镜像名&ndash;&gt;-->
<!--                    <imageName>${project.artifactId}</imageName>-->
<!--                    &lt;!&ndash;指定标签&ndash;&gt;-->
<!--                    <imageTags>-->
<!--                        <imageTag>latest</imageTag>-->
<!--                    </imageTags>-->

<!--                    &lt;!&ndash; 指定 Dockerfile 路径&ndash;&gt;-->
<!--                    <dockerDirectory>src/main/docker</dockerDirectory>-->
<!--                    &lt;!&ndash;指定远程docker环境地址&ndash;&gt;-->
<!--                    <dockerHost>http://192.168.2.234:2375</dockerHost>-->
<!--                    &lt;!&ndash; 复制jar包到docker容器指定目录配置 &ndash;&gt;-->
<!--                    <resources>-->
<!--                        <resource>-->
<!--                            <targetPath>/</targetPath>-->
<!--                            &lt;!&ndash;jar包所在的路径，此处配置的 即对应target 目录&ndash;&gt;-->
<!--                            <directory>${project.build.directory}</directory>-->
<!--                            &lt;!&ndash; 需要包含的jar包，这里对应的是 Dockerfile中添加的文件名　&ndash;&gt;-->
<!--                            <include>${project.build.finalName}.jar</include>-->
<!--                        </resource>-->
<!--                    </resources>-->
<!--                </configuration>-->
<!--            </plugin>-->

<!--        </plugins>-->
<!--    </build>-->
</project>